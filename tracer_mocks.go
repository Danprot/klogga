// Code generated by MockGen. DO NOT EDIT.
// Source: tracer.go

// Package klogga is a generated GoMock package.
package klogga

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTracer is a mock of Tracer interface.
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer.
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance.
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// Finish mocks base method.
func (m *MockTracer) Finish(span *Span) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finish", span)
}

// Finish indicates an expected call of Finish.
func (mr *MockTracerMockRecorder) Finish(span interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockTracer)(nil).Finish), span)
}

// Name mocks base method.
func (m *MockTracer) Name() ComponentName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(ComponentName)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTracerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTracer)(nil).Name))
}
